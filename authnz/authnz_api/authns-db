#!/usr/bin/env sh
set -eu
[ "${DEBUG:-0}" = "1" ] && set -x

DB_FILE="${DB_FILE:-authns.db}"
SCHEMA_FILE="${SCHEMA_FILE:-schema-sqlite3.sql}"

_err () { echo "$0: Error: $*" ; exit 1 ; }

_cmd_load_schema () {
    schemafile="${1:-$SCHEMA_FILE}"
    sqlite3 "$DB_FILE" < "$schemafile"
}

_cmd_drop_table () {
    table="$1"; shift
    printf "DROP TABLE %s\n" "$table" \
        | sqlite3 "$DB_FILE"
}

AUTHNS_DB_TABLE_USERS="user"
_cmd_user () {
    cmd="$1"; shift ; "_cmd_user_$cmd" "$@"
}
_cmd_user_get () {
    userid="$1"; shift
    printf "SELECT id, username, password, email FROM ${AUTHNS_DB_TABLE_USERS} WHERE username = '%s'\n" \
        "$userid" \
        | sqlite3 "$DB_FILE" -cmd ".mode json"
}
_cmd_user_auth () {
    userid="$1" pass="$2" ; shift 2
    dbpass="$(printf "SELECT password FROM ${AUTHNS_DB_TABLE_USERS} WHERE username = '%s'\n" "$userid" \
        | sqlite3 "$DB_FILE")"
    if [ ! "$dbpass" = "$pass" ] ; then
        _err "password does not match"
    fi
    return 0
}
_cmd_user_create () {
    while getopts "u:n:e:p:" args ; do
        case "$args" in
            u)  userid="$OPTARG" ;;
            n)  name="$OPTARG" ;;
            e)  email="$OPTARG" ;;
            p)  pass="$OPTARG" ;;
        esac
    done
    shift $((OPTIND-1))
    printf "INSERT INTO ${AUTHNS_DB_TABLE_USERS} (username, name, email, password) VALUES ('%s', '%s', '%s', '%s')\n" \
        "$userid" "$name" "$email" "$pass" \
    | sqlite3 "$DB_FILE"
}

_usage () {
    cat <<EOUSAGE
Usage: $0 COMMAND [ARG ..]

Commands:
    load_schema [FILE]
    drop_table TABLE
    user get USER
    user auth USER PASS
    user create -u USER -n NAME -e EMAIL -p PASS
EOUSAGE
    exit 1
}

[ $# -gt 0 ] || _usage
CMD="$1"; shift
"_cmd_$CMD" "$@"
